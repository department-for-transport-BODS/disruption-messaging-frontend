//
// __GRID.scss
//
// Generic flexbox based grid classes.
// Usage:
// .grid 						: sets the width constraint on the container
// .grid__row 					: sets the flex-row (but allows wrapping). Adds padding to the outer edge
// .grid__col--<b>-<s>) 		: where <b> is breakpoint and <s> is the number of columns (12 columns total by default).
//							  	  width is applied *above* the breakpoint
//	.grid__col--<b>-offset-<s>	: sets the number of columns to offset the column by
//
// There are also utility classes for changing the flex-order and setting alignment and justification.

@import '../variables/variables';
@import '../functions/functions';

@mixin grid-col-column($grow: false, $shrink: false, $basis: '', $max-width: '') {
	box-sizing: border-box;

	// split flex: 0, 0, auto) into individual pros
	@if $grow {
		flex-grow: 1;
	} @else {
		flex-grow: 0;
	}
	@if $shrink {
		flex-shrink: 1;
	} @else {
		flex-shrink: 0;
	}
	@if $basis != '' {
		flex-basis: $basis;
	}

	@if $max-width != '' {
		max-width: $max-width;
	}
	// we leave flex-basis:auto) out of common becaue
	// in some spots we need it and some we dont
	// more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

	padding-right: $half-gutter-width;
	padding-left: $half-gutter-width;
}

.grid {
	width: 100%;
	max-width: rem(1152);
	&__row {
		box-sizing: border-box;
		display: flex;
		flex: 0 1 auto;
		flex-direction: row;
		flex-wrap: wrap;
		margin-right: $gutter-compensation;
		margin-left: $gutter-compensation;
		&--reverse {
			flex-direction: row-reverse;
			.grid--column {
				flex-direction: column-reverse;
			}
		}
		&--column {
			flex-direction: column;
		}
	}
	&__col {
		&--collapse {
			&:empty {
				display: none;
			}
		}
	}
}

$name: xs;
.grid__col-#{$name} {
	@include grid-col-column(true, false, 0, 100%);
}
.grid__col--#{$name}-auto {
	@include grid-col-column(true, false, auto, 100%);
}

@for $i from 1 through $grid-columns {
	.grid__col--#{$name}-#{$i} {
		@include grid-col-column(false, false, 100% / $grid-columns * $i, 100% / $grid-columns * $i);
	}
}
@for $i from 0 through $grid-columns {
	.grid__col--#{$name}-offset-#{$i} {
		@if $i == 0 {
			margin-left: 0;
		} @else {
			margin-left: 100% / $grid-columns * $i;
		}
	}
	.grid__col--#{$name}-order-#{$i} {
		order: $i;
	}
}

.grid__row {
	&--justify-start-#{$name} {
		justify-content: flex-start;
		text-align: left;
	}
	&--justify-center-#{$name} {
		justify-content: center;
		text-align: center;
	}
	&--justify-end-#{$name} {
		justify-content: flex-end;
		text-align: right;
	}
	&--align-top-#{$name} {
		align-items: flex-start;
	}
	&--align-middle-#{$name} {
		align-items: center;
	}
	&--align-bottom-#{$name} {
		align-items: flex-end;
	}
	&--justify-around-#{$name} {
		justify-content: space-around;
	}
	&--justify-between-#{$name} {
		justify-content: space-between;
	}
}

@each $breakpoint in $breakpoint-grid-prefix {
	$query: nth($breakpoint, 1);
	$name: nth($breakpoint, 2);
	@include bp($query) {
		.grid__col--#{$name} {
			@include grid-col-column(true, false, 0, 100%);
		}
		.grid__col--#{$name}-auto {
			@include grid-col-column(true, false, auto, 100%);
		}
		@for $i from 1 through $grid-columns {
			.grid__col--#{$name}-#{$i} {
				@include grid-col-column(false, false, 100% / $grid-columns * $i, 100% / $grid-columns * $i);
			}
		}
		@for $i from 0 through $grid-columns {
			.grid__col--#{$name}-offset-#{$i} {
				@if $i == 0 {
					margin-left: 0;
				} @else {
					margin-left: 100% / $grid-columns * $i;
				}
			}
			.grid__col--#{$name}-order-#{$i} {
				order: $i;
			}
		}
		.grid__row {
			&--justify-start-#{$name} {
				justify-content: flex-start;
				text-align: left;
			}
			&--justify-center-#{$name} {
				justify-content: center;
				text-align: center;
			}
			&--justify-end-#{$name} {
				justify-content: flex-end;
				text-align: right;
			}
			&--align-top-#{$name} {
				align-items: flex-start;
			}
			&--align-middle-#{$name} {
				align-items: center;
			}
			&--align-bottom-#{$name} {
				align-items: flex-end;
			}
			&--justify-around-#{$name} {
				justify-content: space-around;
			}
			&--justify-between-#{$name} {
				justify-content: space-between;
			}
		}
	}
}
